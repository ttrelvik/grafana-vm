services:
  traefik:
    image: traefik:latest
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    networks:
      - web
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker socket for Traefik to monitor Docker
      - ./traefik.yml:/etc/traefik/traefik.yml:ro     # Bind mount for Traefik config
      - ./acme.json:/acme.json                        # Bind mount for Let's Encrypt certificates

    labels:
      # Global middleware for redirecting HTTP to HTTPS
      - "traefik.http.routers.http-catchall.rule=hostregexp(`{host:.+}`)"
      - "traefik.http.routers.http-catchall.entrypoints=web"
      - "traefik.http.routers.http-catchall.middlewares=https-redirect"
      - "traefik.http.middlewares.https-redirect.redirectscheme.scheme=https"

      # Router for the Traefik dashboard
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN_NAME}`)"
      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"

      # --- SSO Middleware for the dashboard ---
      - "traefik.http.routers.traefik.middlewares=sso-auth"
      - "traefik.http.middlewares.sso-auth.forwardauth.address=http://traefik-forward-auth:4181"
      - "traefik.http.middlewares.sso-auth.forwardauth.authResponseHeaders=X-Forwarded-User"

  traefik-forward-auth:
    image: thomseddon/traefik-forward-auth:2
    container_name: traefik-forward-auth
    restart: unless-stopped
    networks:
      - web
    environment:
      # --- Entra ID OIDC Provider Configuration ---
      - "DEFAULT_PROVIDER=oidc"
      - "PROVIDERS_OIDC_ISSUER_URL=https://login.microsoftonline.com/${ENTRA_TENANT_ID}/v2.0"
      - "PROVIDERS_OIDC_CLIENT_ID=${ENTRA_CLIENT_ID}"
      - "PROVIDERS_OIDC_CLIENT_SECRET=${ENTRA_CLIENT_SECRET}"

      # --- General Auth Configuration ---
      - "SECRET=${FORWARD_AUTH_SECRET}"
      - "AUTH_HOST=auth.${DOMAIN_NAME}"
      - "COOKIE_DOMAIN=.${DOMAIN_NAME}" # Leading dot for subdomains

      # --- User Access Control ---
      - "WHITELIST=${ALLOWED_USERS}"  # Comma-separated list of allowed user emails
      - "LOG_LEVEL=info"
    labels:
      - "traefik.enable=true"
      # --- Router for the auth service and callback ---
      - "traefik.http.routers.forward-auth.rule=Host(`auth.${DOMAIN_NAME}`)"
      - "traefik.http.routers.forward-auth.entrypoints=websecure"
      - "traefik.http.routers.forward-auth.tls=true"
      - "traefik.http.routers.forward-auth.tls.certresolver=letsencrypt"
      - "traefik.http.services.forward-auth.loadbalancer.server.port=4181"

  loki:
    image: grafana/loki:latest
    container_name: loki
    restart: unless-stopped
    networks:
      - web
    command: -config.file=/etc/loki/local-config.yaml
    volumes:
      - loki-data:/loki   # named volume for Loki data
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.loki.rule=Host(`loki.${DOMAIN_NAME}`)"
      - "traefik.http.routers.loki.entrypoints=websecure" 
      - "traefik.http.routers.loki.tls.certresolver=letsencrypt"
      - "traefik.http.services.loki.loadbalancer.server.port=3100"
      - "traefik.http.services.loki.loadbalancer.server.scheme=http" # Ensure Traefik uses HTTP to communicate with Loki

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    networks:
      - web
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml # Bind mount for Prometheus config
      - prometheus-data:/prometheus                     # named volume for Prometheus data
    command: --config.file=/etc/prometheus/prometheus.yml
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.prometheus.rule=Host(`prometheus.${DOMAIN_NAME}`)"
      - "traefik.http.routers.prometheus.entrypoints=websecure"
      - "traefik.http.routers.prometheus.tls.certresolver=letsencrypt"
      - "traefik.http.services.prometheus.loadbalancer.server.port=9090"
      - "traefik.http.services.prometheus.loadbalancer.server.scheme=http" # Ensure Traefik uses HTTP to communicate with Prometheus

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    networks:
      - web
    volumes:
      - grafana-data:/var/lib/grafana                           # named volume for Grafana data
      - ./grafana-config/provisioning:/etc/grafana/provisioning # Bind mount for provisioning config
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`grafana.${DOMAIN_NAME}`)"
      - "traefik.http.routers.grafana.entrypoints=websecure"
      - "traefik.http.routers.grafana.tls.certresolver=letsencrypt"
      - "traefik.http.services.grafana.loadbalancer.server.port=3000"
      - "traefik.http.services.grafana.loadbalancer.server.scheme=http" # Ensure Traefik uses HTTP to communicate with Grafana

  node-exporter:
    image: prom/node-exporter:v1.9.1
    container_name: node-exporter
    restart: unless-stopped
    networks:
      - web
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'

  promtail:
    image: grafana/promtail:3.5
    container_name: promtail
    restart: unless-stopped
    volumes:
      - ./promtail-config:/etc/promtail # bind mount for config
      - promtail-data:/tmp              # named volume for data
      - /var/log/journal:/var/log/journal:ro
    command: -config.file=/etc/promtail/config.yml
    networks:
      - web

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.52.0
    container_name: cadvisor
    restart: unless-stopped
    privileged: true
    volumes:
      - /:/rootfs:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
      - /sys/fs/cgroup:/sys/fs/cgroup:ro
    command:
      - --enable_metrics=cpu,memory,network,disk,diskIO
      - --store_container_labels=true
    networks:
      - web

# Define the named volumes
volumes:
  grafana-data:
  prometheus-data:
  loki-data:
  promtail-data:

# Define the shared network
networks:
  web:
    driver: bridge
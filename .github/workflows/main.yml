name: "Terraform CI/CD"

on:
  # Trigger the workflow on pushes to the main branch
  push:
    branches:
      - main
  # Trigger the workflow on pull requests to the main branch
  pull_request:
    branches:
      - main

jobs:
  validate:
    name: "Validate and Plan"
    runs-on: ubuntu-latest
    # This job will only run on pull request events
    if: github.event_name == 'pull_request'

    # Permissions for the 'validate' job
    permissions:
      contents: read          # To checkout the repository
      pull-requests: write   # To post comments on the PR
      security-events: write # To upload Trivy scan results

    # Set environment variables for all steps in this job
    env:
      TF_WORKSPACE: grafana-dev
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_home_ddns_hostname: ${{ secrets.HOME_DDNS_HOSTNAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          # This configures the CLI to use Terraform Cloud
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Run Trivy scan for IaC misconfigurations
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'HIGH,CRITICAL'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Terraform Init
        id: init
        run: terraform init -input=false

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color -input=false -out=tfplan

      - name: Update Pull Request with Plan
        uses: actions/github-script@v7
        if: always()  # Ensure this step runs even if previous steps fail
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>

            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`

            </details>
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>
            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

  deploy:
    name: "Deploy to Production"
    runs-on: ubuntu-latest
    # This job will only run on pushes to the main branch
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    # Permissions for the 'deploy' job
    permissions:
      contents: read # Only needs to read the repo to checkout

    # Set environment variables for all steps in this job
    env:
      TF_WORKSPACE: grafana-prod
      ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
      TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
      TF_VAR_home_ddns_hostname: ${{ secrets.HOME_DDNS_HOSTNAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Get Runner's Public IP
        id: ip
        run: echo "ipv4=$(curl -s ifconfig.me)" >> $GITHUB_OUTPUT

      - name: Terraform Init
        run: terraform init -input=false

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false -var="runner_ip_address=${{ steps.ip.outputs.ipv4 }}"

      - name: Get Terraform Outputs
        id: outputs
        run: |
          echo "vm_ip=$(terraform output -raw vm_public_ip)" >> $GITHUB_OUTPUT
          echo "fqdn=$(terraform output -raw fqdn)" >> $GITHUB_OUTPUT

      - name: Wait for NSG rules to propagate
        run: sleep 45

      - name: Run Ansible Playbook
        uses: dawidd6/action-ansible-playbook@v2
        env:
          DOMAIN_NAME: ${{ steps.outputs.outputs.fqdn }}
        with:
          playbook: playbook.yml
          directory: ./ansible
          inventory: |
            [servers]
            ${{ steps.outputs.outputs.vm_ip }}
            
            [all:vars]
            ansible_user=azureuser
          key: ${{ secrets.SSH_PRIVATE_KEY }}